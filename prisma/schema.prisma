// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Office {
  id        String   @id @default(uuid())
  name      String   @unique
  staff     Staff[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Department {
  id    String  @id @default(uuid())
  name  String  @unique
  staff Staff[]
}

model JobTitle {
  id    String  @id @default(uuid())
  title String  @unique
  staff Staff[]
}

model Staff {
  id                         String    @id @default(uuid())
  microsoftId                String    @unique // Microsoft Graph user ID
  displayName                String
  givenName                  String?
  surname                    String?
  userPrincipalName          String    @unique
  email                      String    @unique
  jobTitle                   String?
  department                 String?
  officeLocation             String?
  mobilePhone                String?
  businessPhones             String[] // Array of phone numbers
  preferredLanguage          String?
  employeeId                 String?
  employeeType               String?
  employeeHireDate           DateTime?
  usageLocation              String?
  accountEnabled             Boolean   @default(true)
  createdDateTime            DateTime?
  lastPasswordChangeDateTime DateTime?
  userType                   String?

  // Organizational hierarchy
  managerId     String?
  manager       Staff?  @relation("Manager", fields: [managerId], references: [id])
  directReports Staff[] @relation("Manager")

  // Office relationship
  officeId String?
  office   Office? @relation(fields: [officeId], references: [id])

  // Metadata
  lastSyncAt   DateTime    @default(now())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Department   Department? @relation(fields: [departmentId], references: [id])
  departmentId String?
  JobTitle     JobTitle?   @relation(fields: [jobTitleId], references: [id])
  jobTitleId   String?

  @@index([microsoftId])
  @@index([email])
  @@index([userPrincipalName])
  @@index([department])
  @@index([jobTitle])
  @@index([officeLocation])
  @@index([managerId])
  @@index([officeId])
}

enum UserStatus {
  ACTIVE
  INACTIVE
  LOCKED
  DELETED
}

model User {
  id        String        @id @default(cuid())
  email     String        @unique
  name      String?
  status    UserStatus    @default(ACTIVE)
  role      String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  sessions  UserSession[]
  adminUser AdminUser?
}

model AdminUser {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model UserSession {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId    String    @unique
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([sessionId])
  @@index([userId])
}

enum SyncType {
  users
  hierarchy
  reference_data
  link_references
  full_sync
  selective_sync
  incremental_sync
}

enum SyncStatus {
  running
  success
  error
  partial
  cancelled
}

enum ScheduleSyncType {
  incremental
  full
  selective
}

model SyncLog {
  id               String        @id @default(uuid())
  syncType         SyncType
  status           SyncStatus
  message          String?
  recordsProcessed Int           @default(0)
  recordsFailed    Int           @default(0)
  startedAt        DateTime      @default(now())
  completedAt      DateTime?
  createdAt        DateTime      @default(now())
  masterSyncLogId  String? // Reference to master sync log for full syncs
  scheduleId       String? // Reference to schedule that triggered this sync
  schedule         SyncSchedule? @relation(fields: [scheduleId], references: [id])
}

model SyncSchedule {
  id             String           @id @default(uuid())
  name           String           @unique
  description    String?
  syncType       ScheduleSyncType
  cronExpression String // Cron expression for scheduling
  syncOptions    Json // Stored sync options as JSON
  enabled        Boolean          @default(true)
  lastRun        DateTime?
  nextRun        DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Relations
  syncLogs SyncLog[]
}
