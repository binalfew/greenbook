// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organ {
  id          String       @id @default(uuid())
  name        String
  description String?
  departments Department[]
}

model Department {
  id      String  @id @default(uuid())
  name    String
  organId String
  organ   Organ   @relation(fields: [organId], references: [id])
  staff   Staff[]
}

model JobTitle {
  id    String  @id @default(uuid())
  title String
  staff Staff[]
}

model Staff {
  id                         String    @id @default(uuid())
  microsoftId                String    @unique // Microsoft Graph user ID
  displayName                String
  givenName                  String?
  surname                    String?
  userPrincipalName          String    @unique
  email                      String    @unique
  jobTitle                   String?
  department                 String?
  officeLocation             String?
  mobilePhone                String?
  businessPhones             String[] // Array of phone numbers
  preferredLanguage          String?
  employeeId                 String?
  employeeType               String?
  employeeHireDate           DateTime?
  usageLocation              String?
  accountEnabled             Boolean   @default(true)
  createdDateTime            DateTime?
  lastPasswordChangeDateTime DateTime?
  userType                   String?

  // Organizational hierarchy
  managerId     String?
  manager       Staff?  @relation("Manager", fields: [managerId], references: [id])
  directReports Staff[] @relation("Manager")

  // Photo
  userPhoto UserPhoto?

  // Legacy fields (keeping for backward compatibility)
  phone          String?
  photoUrl       String?
  jobTitleId     String?
  jobTitleRef    JobTitle?   @relation(fields: [jobTitleId], references: [id])
  departmentId   String?
  departmentRef  Department? @relation(fields: [departmentId], references: [id])
  employmentType String?
  expertise      String[]
  biography      String?
  bioEn          String?
  bioFr          String?
  bioAr          String?
  bioPt          String?

  // Metadata
  lastSyncAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([microsoftId])
  @@index([email])
  @@index([userPrincipalName])
  @@index([department])
  @@index([jobTitle])
  @@index([officeLocation])
  @@index([managerId])
}

enum UserStatus {
  ACTIVE
  INACTIVE
  LOCKED
  DELETED
}

model User {
  id        String        @id @default(cuid())
  email     String        @unique
  name      String?
  status    UserStatus    @default(ACTIVE)
  role      String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  roles     Role[]
  sessions  UserSession[]
}

model UserSession {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId    String    @unique
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([sessionId])
  @@index([userId])
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  permissions Permission[]
  users       User[]
}

model Permission {
  id          String   @id @default(cuid())
  action      String
  entity      String
  access      String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       Role[]

  @@unique([action, entity, access])
}

model UserPhoto {
  id          String   @id @default(uuid())
  staffId     String   @unique
  staff       Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
  photoData   String // Base64 encoded photo data
  contentType String   @default("image/jpeg")
  lastSyncAt  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SyncLog {
  id               String    @id @default(uuid())
  syncType         String // 'users', 'hierarchy', 'photos', 'full_sync'
  status           String // 'running', 'success', 'error', 'partial', 'cancelled'
  message          String?
  recordsProcessed Int       @default(0)
  recordsFailed    Int       @default(0)
  startedAt        DateTime  @default(now())
  completedAt      DateTime?
  createdAt        DateTime  @default(now())
  masterSyncLogId  String? // Reference to master sync log for full syncs
}
